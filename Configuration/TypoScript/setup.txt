###
# This is the default TS-setup
##

plugin.tx_adgooglemaps {
	settings {

		# Controller settings corresponding to the tt_content plugin record sheet. Values will be overridden by the FlexForm values.
		# All settings will be parsed by stdWrap function. The given data is the content element. 
		# Flexform values of the template controller will be merged with the content data. The dots are replaced with underscore of the field names: flexform.mapUid becomes flexformMapUid.
		controllers {

			# Tx_AdGoogleMaps_Controller_DefaultController->index
			default {
				index {
					mapUid = 
					mapUid.override.field = flexformMapUid

					templates = googleMaps->index;listView->index
					templates.override.field = flexformTemplates
				}
			}

			# Tx_AdGoogleMaps_Controller_GoogleMapsController->index
			googleMaps {
				index {
					height = {$plugin.tx_adgooglemaps.settings.controllers.googleMaps.height}
					height.override.field = flexformHeight
				}
			}

			# Tx_AdGoogleMaps_Controller_ListViewController->index
			listView {
				index {
					markers {
						category {
							panTo = javascript: panTo('###LAYER_UID###'); return false;
							fitBounds = javascript: fitBounds('###LAYER_UID###'); return false;
							userFunction = javascript: alert('Category Item Keys: ' + '###LAYER_UIDS###'); return false;
						}
						layer {
							panTo = javascript: panTo('###LAYER_UID###'); return false;
							fitBounds = javascript: fitBounds('###LAYER_UID###'); return false;
							userFunction = javascript: alert('Layer Item Key: ###LAYER_UID###'); return false;
						}
					}
				}
			}

			# Tx_AdGoogleMaps_Controller_SimpleSearchController->index
			simpleSearch {
				index {
					markerIcon = EXT:ad_google_maps/Resources/Public/Icons/MapDrawer/searchMarker.gif
					markerIcon.override.field = flexformMarkerIcon

					markerIconWidth = 9
					markerIconWidth.override.field = flexformMarkerIconWidth

					markerIconHeight = 9
					markerIconHeight.override.field = flexformMarkerIconHeight

					markerIconAnchorX = 4
					markerIconAnchorX.override.field = flexformMarkerIconAnchorX

					markerIconAnchorY = 5
					markerIconAnchorY.override.field = flexformMarkerIconAnchorY
				}
			}
		}

		flexform {
			# Reserved placeholder: incoming data from FlexForm
		}

		TCAConfiguration {

			flexform {

				# Array of FlexForm resources for the content plugin. Will be sorted by key.
				templateSheeds {
					1 = EXT:ad_google_maps/Configuration/FlexForm/TemplateGoogleMaps.xml
					2 = EXT:ad_google_maps/Configuration/FlexForm/TemplateSimpleSearch.xml
				}

				# Controler configuration for the templates.
				controllers {

					googleMaps {
						label = LLL:EXT:ad_google_maps/Resources/Private/Language/locallang_flexform.xml:settings.flexform.default.index.templates.googleMaps
						extensionName = AdGoogleMaps
						pluginName = Pi1
						controller = GoogleMaps
						action = index
						switchableControllerActions {
							GoogleMaps.1 = index
						}
						// Don't set settings here! Set it under plugin.tx_adgooglemaps.controllers.[controllerKey]
					}

					listView {
						label = LLL:EXT:ad_google_maps/Resources/Private/Language/locallang_flexform.xml:settings.flexform.default.index.templates.listView
						extensionName = AdGoogleMaps
						pluginName = Pi1
						controller = ListView
						action = index
						switchableControllerActions {
							ListView.1 = index
						}
						// Don't set settings here! Set it under plugin.tx_adgooglemaps.controllers.[controllerKey]
					}

					simpleSearch {
						label = LLL:EXT:ad_google_maps/Resources/Private/Language/locallang_flexform.xml:settings.flexform.default.index.templates.simpleSearch
						extensionName = AdGoogleMaps
						pluginName = Pi1
						controller = SimpleSearch
						action = index
						switchableControllerActions {
							SimpleSearch.1 = index
						}
						// Don't set settings here! Set it under plugin.tx_adgooglemaps.controllers.[controllerKey]
					}
				}
			}
		}

		# Configuration for the Map Builder.
		# All settings will be parsed by stdWrap function. The given data is the map record.
		mapBuilder {

			# Google Maps API URL grocode: URL for getting geocode per JSON. Required.
			geocodeUrl = {$plugin.tx_adgooglemaps.settings.mapBuilder.geocodeUrl}

			# Use includeCSS, cssInline, includeJSlibs, includeJSFooterlibs, includeJS, includeJSFooter, jsInline or jsFooterInline.
			# This extends the page configuration. Use unique keys!
			includeFrontEndResources {

				# Use classname where they loaded as unique configuration key. Loaded only if needed.
				Tx_AdGoogleMaps_MapBuilder_MapBuilder {
					includeJSlibs {
						Tx_AdGoogleMaps_ApiUrl = {$plugin.tx_adgooglemaps.settings.mapBuilder.apiUrl}
						Tx_AdGoogleMaps_ApiUrl.external = 1
					}

					includeJS {
						Tx_AdGoogleMaps_MapBuilderFile = {$plugin.tx_adgooglemaps.settings.mapBuilder.mapBuilderFile}
					}
				}

				Tx_AdGoogleMaps_MapBuilder_Options {
					includeJS {
						Tx_AdGoogleMaps_MarkerClusterUrl = {$plugin.tx_adgooglemaps.settings.mapBuilder.markerClusterUrl}
						Tx_AdGoogleMaps_MarkerClusterUrl.external = 1
					}
				}

				Tx_AdGoogleMaps_Controller_GoogleMapsController {
					includeJS {
						Tx_AdGoogleMaps_SimpleSearch = EXT:ad_google_maps/Resources/Public/JavaScript/MapBuilder/Tx_AdGoogleMaps_SimpleSearch.js
					}
				}

				Tx_AdGoogleMaps_MapBuilder_Options_Overlay_InfoWindow {
					includeJS {
						Tx_AdGoogleMaps_InfoWindow = EXT:ad_google_maps/Resources/Public/JavaScript/MapBuilder/Tx_AdGoogleMaps_InfoWindow.js
					}
				}

				Tx_AdGoogleMaps_MapBuilder_Options_Overlay_Marker {
					includeJS {
						Tx_AdGoogleMaps_Marker = EXT:ad_google_maps/Resources/Public/JavaScript/MapBuilder/Tx_AdGoogleMaps_Marker.js
					}
				}
			}

			options {

				# All settings will be parsed by stdWrap function. The given data is the map record.
				mapOptions {

					# The DIV container where the map is shown. Required.
					canvas = {$plugin.tx_adgooglemaps.settings.api.canvas}

					# The default mapTypeId. Required.
					# The stdWrap function can be used with string properties.
					mapTypeId = {$plugin.tx_adgooglemaps.settings.api.mapTypeId}
					mapTypeId.override.field = mapTypeId

					# The default latitude and longitude where the map should start. Required.
					# Use this way for object injection.
					center {
						latitude = {$plugin.tx_adgooglemaps.settings.api.center}
						latitude.override.field = center
						latitude.listNum = 0

						longitude = {$plugin.tx_adgooglemaps.settings.api.center}
						longitude.override.field = center
						longitude.listNum = 1
					}

					# The default zoom. Required.
					zoom = {$plugin.tx_adgooglemaps.settings.api.zoom}
					zoom.override.field = zoom

					# Min. zoom: The min. zoom.
					minZoom = {$plugin.tx_adgooglemaps.settings.api.minZoom}
					minZoom.override.field = minZoom

					# Max. zoom: The max. zoom.
					maxZoom = {$plugin.tx_adgooglemaps.settings.api.maxZoom}
					maxZoom.override.field = maxZoom

					# Usually the parser sets the values from the given data. In this case the database field name e.g. "mapTypeControlOptionsMapTypeIds" 
					# doesn't corresponded to the object property path "mapTypeControlOptions.mapTypeIds". So it's necessary to set it manually.
					mapTypeControlOptions {
						mapTypeIds.field = mapTypeControlOptionsMapTypeIds
						style.field = mapTypeControlOptionsStyle
						position.field = mapTypeControlOptionsPosition
					}

					rotateControlOptions {
						position.field = rotateControlOptionsPosition
					}

					scaleControlOptions {
						style.field = scaleControlOptionsStyle
						position.field = scaleControlOptionsPosition
					}

					panControlOptions {
						position.field = panControlOptionsPosition
					}

					zoomControlOptions {
						style.field = zoomControlOptionsStyle
						position.field = zoomControlOptionsPosition
					}

					overviewMapControlOptions {
						opened.field = overviewMapControlOptionsIsOpened
					}

					streetViewControlOptions {
						position.field = streetViewControlOptionsPosition
					}
				}

				# All settings will be parsed by stdWrap function. The given data is the map record.
				mapControl {
					fitBoundsOnLoad = 0
					fitBoundsOnLoad.override.field = centerType
				}

				# All settings will be parsed by stdWrap function. The given data is the layer record.
				layers {

					defaults {

						Tx_AdGoogleMaps_MapBuilder_Options_Overlay_Marker = Tx_AdGoogleMaps_MapBuilder_Options_Overlay_Marker
						Tx_AdGoogleMaps_MapBuilder_Options_Overlay_Marker {

							options {

								icon {
									url = EXT:ad_google_maps/Resources/Public/Icons/Marker/airport.png

									size.width.field = iconWidth
									size.height.field = iconHeight

									origin.x.field = iconOriginX
									origin.y.field = iconOriginY

									anchor.x.field = iconAnchorX
									anchor.y.field = iconAnchorY

									scaled.width.field = iconScaledWidth
									scaled.height.field = iconScaledHeight
								}

								shadow {
									url = EXT:ad_google_maps/Resources/Public/Icons/Shadow/shadow.png

									size.width.field = shadowWidth
									size.height.field = shadowHeight

									origin.x.field = shadowOriginX
									origin.y.field = shadowOriginY

									anchor.x = 15
									anchor.x.override.field = shadowAnchorX
	
									anchor.y = 30
									anchor.y.override.field = shadowAnchorY

									scaled.width.field = shadowScaledWidth
									scaled.height.field = shadowScaledHeight
								}
							}
						}

						Tx_AdGoogleMaps_MapBuilder_Options_Overlay_InfoWindow = Tx_AdGoogleMaps_MapBuilder_Options_Overlay_InfoWindow
						Tx_AdGoogleMaps_MapBuilder_Options_Overlay_InfoWindow {
							infoWindowKeepOpen = 1
							infoWindowCloseOnClick = 0
							infoWindowCloseOnClick.override = 1
						}
					}

					1 = Tx_AdGoogleMaps_MapBuilder_Options_Overlay_Marker
					1 {
						id = 1
						options = Tx_AdGoogleMaps_MapBuilder_API_Overlay_Marker
						options {
							position {
								latitude = 48.209206
								longitude = 16.372778
							}
							draggable = 1
						}
					}

					2 = Tx_AdGoogleMaps_MapBuilder_Options_Overlay_InfoWindow
					2 {
						id = 2
						linkToLayerId = 1
						options = Tx_AdGoogleMaps_MapBuilder_API_Overlay_InfoWindow
						options {
							content = abc
						}
					}
				}
			}

			# Debug mode: If set the Google Maps options will printed in readable format.
			jsonConverter.debug = 1
		}

		mapManager {

			typeProcessor {

				marker {
					
					0 = Tx_AdGoogleMaps_MapManager_TypeProcessor_GoogleMaps->process
					1 = Tx_AdGoogleMaps_MapManager_TypeProcessor_ListView->process
				}
			}
		}

		api {

			# The DIV container where the map is shown. Required.
			canvas = {$plugin.tx_adgooglemaps.settings.api.canvas}

			# The default mapTypeId. Required.
			mapTypeId = {$plugin.tx_adgooglemaps.settings.api.mapTypeId}

			# The default latitude and longitude where the map should start. Required.
			center = {$plugin.tx_adgooglemaps.settings.api.center}

			# The default zoom. Required.
			zoom = {$plugin.tx_adgooglemaps.settings.api.zoom}

			# Min. zoom: The min. zoom.
			minZoom = {$plugin.tx_adgooglemaps.settings.api.minZoom}

			# Max. zoom: The max. zoom.
			maxZoom = {$plugin.tx_adgooglemaps.settings.api.maxZoom}
		}

		mapDrawer {

			# Google Maps API URL: The URL to the Google Maps API.
			apiUrl = {$plugin.tx_adgooglemaps.settings.mapBuilder.apiUrl}

			# Path to the Google Maps MapDrawer. Required.
			apiJavaScriptFile = EXT:ad_google_maps/Resources/Public/JavaScript/MapDrawer/Tx_AdGoogleMaps_MapDrawer.js

			tables {
				tx_adgooglemaps_domain_model_layer {

					# Field name of the record type.
					typeField = type

					recordTypes {
						Tx_AdGoogleMaps_MapManager_LayerProcessor_Marker {

							# Class name of the type processor.
							className = Tx_AdGoogleMaps_MapDrawer_Layer_Marker

							# Array for additional JavaScript files.
							javaScriptFiles.1 = EXT:ad_google_maps/Resources/Public/JavaScript/MapDrawer/Tx_AdGoogleMaps_MapDrawer_Layer_Marker.js

							templateFile = EXT:ad_google_maps/Resources/Private/Templates/MapDrawer/index.html

							# The default map width (style value). Default 90%.
							canvasWidth = 90%

							# The default map height (style value). Default 400px.
							canvasHeight = 400px

							# The default mapTypeId. Default google.maps.MapTypeId.ROADMAP.
							mapTypeId = {$plugin.tx_adgooglemaps.settings.api.mapTypeId}

							# The default latitude and longitude where the map should start. Default 48.209206,16.372778.
							center = {$plugin.tx_adgooglemaps.settings.api.center}

							# The default zoom. Default 11.
							zoom = {$plugin.tx_adgooglemaps.settings.api.zoom}

							# The min. zoom.
							minZoom = {$plugin.tx_adgooglemaps.settings.api.minZoom}

							# The max. zoom.
							maxZoom = {$plugin.tx_adgooglemaps.settings.api.maxZoom}

							# Fit bounds on load.
							fitBoundsOnLoad = 1

							# Columns mapping. Also usefull to see the color e.g. of shapes in the MapDrawer.
							columnsMapping {
								coordinates = coordinates
							}
						}
					}
				}
			}
		}

		# Configuration for map record. Values will be override the record values if set. 
		map {

			# The initial height. Required.
			height = {$plugin.tx_adgooglemaps.settings.map.height}

			searchMarkerWidth = 9
			searchMarkerHeight = 9
			searchMarkerAnchorX = 4
			searchMarkerAnchorY = 5
		}

		category {
			mapControlFunctions {
				userFunction = alert('Category Item Keys: ' + ###LAYER_UIDS###)
			}
		}

		# Configuration for layer record. Values will be override the record values if set. 
		layer {

			shadowAnchorX = 15
			shadowAnchorY = 30

			# To set a user defined function, set a key and the value. The function can be insert 
			# with the key in the template as "item.mapControlFunctions.userFunction".
			# You can also override existing functions like "openInfoWindow", "panTo" or "fitBounds".
			mapControlFunctions {
				userFunction = alert('Layer Item Key: ###LAYER_UID###')
			}

			# Content rendering for the info window.
			infoWindowRenderConfiguration < tt_content
		}
	}

	persistence {

		storagePid = {$plugin.tx_adgooglemaps.persistence.storagePid}

		classes {
			Tx_AdGoogleMaps_Domain_Model_Layer {
				mapping {
					tableName = tx_adgooglemaps_domain_model_layer
				}
				subclasses {
					Tx_AdGoogleMaps_MapManager_LayerProcessor_Marker = Tx_AdGoogleMaps_Domain_Model_Layer_Marker
				}
			}

			Tx_AdGoogleMaps_Domain_Model_Layer_Marker {
				mapping {
					recordType = Tx_AdGoogleMaps_MapManager_LayerProcessor_Marker
					tableName = tx_adgooglemaps_domain_model_layer
				}
			}
		}
	}

	view {
		templateRootPath = {$plugin.tx_adgooglemaps.view.templateRootPath}
		partialRootPath = {$plugin.tx_adgooglemaps.view.partialRootPath}
		layoutRootPath = {$plugin.tx_adgooglemaps.view.layoutRootPath}
	}

	_LOCAL_LANG {
		default {
			searchLegend = Search
			searchLabel = Search for Address
			searchButton = Search
			panTo = pan to
			fitBounds = fit bounds
			userFunction = user function
		}
	}
}

###
# Replace stdheaders insertData with dataWrap. insertData replace Fluid variables of the info windows for tt_address.
##
[globalVar = LIT:1 = {$plugin.tx_adgooglemaps.settings.mapManager.fixStdHeaderForFluidSyntax}]
lib.stdheader.10 {
	1 = TEXT
	1 {
		current = 1
		insertData >
		fontTag >
		dataWrap = <h1{register:headerStyle}{register:headerClass}>|</h1>
	}

	2 < .1
	2.dataWrap = <h2{register:headerStyle}{register:headerClass}>|</h2>

	3 < .1
	3.dataWrap = <h3{register:headerStyle}{register:headerClass}>|</h3>

	4 < .1
	4.dataWrap = <h4{register:headerStyle}{register:headerClass}>|</h4>

	5 < .1
	5.dataWrap = <h5{register:headerStyle}{register:headerClass}>|</h5>
}
[end]