###
# This is the default TS-setup
##

plugin.tx_adgooglemaps {
	settings {

		api {

			# The DIV container where the map is shown. Required.
			canvas = {$plugin.tx_adgooglemaps.settings.api.canvas}

			# The default mapTypeId. Required.
			mapTypeId = {$plugin.tx_adgooglemaps.settings.api.mapTypeId}

			# The default latitude and longitude where the map should start. Required.
			center = {$plugin.tx_adgooglemaps.settings.api.center}

			# The default zoom. Required.
			zoom = {$plugin.tx_adgooglemaps.settings.api.zoom}

			# Min. zoom: The min. zoom.
			minZoom = {$plugin.tx_adgooglemaps.settings.api.minZoom}

			# Max. zoom: The max. zoom.
			maxZoom = {$plugin.tx_adgooglemaps.settings.api.maxZoom}
		}

		plugin {

			# Use includeCSS, cssInline, includeJSlibs, includeJSFooterlibs, includeJS, includeJSFooter, jsInline or jsFooterInline.
			# This extends the page configuration. Use unique keys!
			includeFrontEndResources {

				# Use classname where they loaded as unique configuration key.
				Tx_AdGoogleMaps_Plugin_GoogleMaps {
					includeJSlibs {
						Tx_AdGoogleMaps_ApiUrl = {$plugin.tx_adgooglemaps.settings.plugin.apiUrl}
						Tx_AdGoogleMaps_ApiUrl.external = 1
					}

					includeJS {
						Tx_AdGoogleMaps_PluginFile = {$plugin.tx_adgooglemaps.settings.plugin.pluginFile}
					}
				}
				Tx_AdGoogleMaps_Plugin_Options {
					includeJS {
						Tx_AdGoogleMaps_MarkerClusterUrl = {$plugin.tx_adgooglemaps.settings.plugin.markerClusterUrl}
						Tx_AdGoogleMaps_MarkerClusterUrl.external = 1
					}
				}

				# Use classname where they loaded as unique configuration key.
				Tx_AdGoogleMaps_Controller_GoogleMapsController {
					includeJS {
						Tx_AdGoogleMaps_SimpleSearch = EXT:ad_google_maps/Resources/Public/JavaScript/Plugin/Tx_AdGoogleMaps_SimpleSearch.js
					}
				}

				# Use classname where they loaded as unique configuration key.
				Tx_AdGoogleMaps_MapBuilder_Layer_InfoWindow {
					includeJS {
						Tx_AdGoogleMaps_InfoWindow = EXT:ad_google_maps/Resources/Public/JavaScript/Plugin/Tx_AdGoogleMaps_InfoWindow.js
					}
				}
				Tx_AdGoogleMaps_MapBuilder_Layer_Marker {
					includeJS {
						Tx_AdGoogleMaps_Marker = EXT:ad_google_maps/Resources/Public/JavaScript/Plugin/Tx_AdGoogleMaps_Marker.js
					}
				}
			}

			# Google Maps API URL grocode: URL for getting geocode per JSON. Required.
			geocodeUrl = {$plugin.tx_adgooglemaps.settings.plugin.geocodeUrl}

			# Debug mode: If set the Google Maps options will printed in a readable format.
			debugMode = 0
		}

		mapDrawer {

			# Google Maps API URL: The URL to the Google Maps API.
			apiUrl = {$plugin.tx_adgooglemaps.settings.plugin.apiUrl}

			# Path to the Google Maps MapDrawer. Required.
			apiJavaScriptFile = EXT:ad_google_maps/Resources/Public/JavaScript/MapDrawer/Tx_AdGoogleMaps_MapDrawer.js

			tables {
				tx_adgooglemaps_domain_model_layer {

					# Field name of the record type.
					typeField = type

					recordTypes {
						Tx_AdGoogleMaps_MapBuilder_Layer_Marker {

							# Class name of the type processor.
							className = Tx_AdGoogleMaps_MapDrawer_Layer_Marker

							# Array for additional JavaScript files.
							javaScriptFiles.1 = EXT:ad_google_maps/Resources/Public/JavaScript/MapDrawer/Tx_AdGoogleMaps_MapDrawer_Layer_Marker.js

							templateFile = EXT:ad_google_maps/Resources/Private/Templates/MapDrawer/index.html

							# The default map width (style value). Default 90%.
							canvasWidth = 90%

							# The default map height (style value). Default 400px.
							canvasHeight = 400px

							# The default mapTypeId. Default google.maps.MapTypeId.ROADMAP.
							mapTypeId = {$plugin.tx_adgooglemaps.settings.api.mapTypeId}

							# The default latitude and longitude where the map should start. Default 48.209206,16.372778.
							center = {$plugin.tx_adgooglemaps.settings.api.center}

							# The default zoom. Default 11.
							zoom = {$plugin.tx_adgooglemaps.settings.api.zoom}

							# The min. zoom.
							minZoom = {$plugin.tx_adgooglemaps.settings.api.minZoom}

							# The max. zoom.
							maxZoom = {$plugin.tx_adgooglemaps.settings.api.maxZoom}

							# Fit bounds on load.
							fitBoundsOnLoad = 1

							# Columns mapping. Also usefull to see the color e.g. of shapes in the MapDrawer.
							columnsMapping {
								coordinates = coordinates
							}
						}
					}
				}
			}
		}

		# Configuration for map record. Values will be override the record values if set. 
		map {

			# The initial height. Required.
			height = {$plugin.tx_adgooglemaps.settings.map.height}

			searchMarkerWidth = 9
			searchMarkerHeight = 9
			searchMarkerAnchorX = 4
			searchMarkerAnchorY = 5
		}

		category {
			mapControlFunctions {
				userFunction = alert('Category Item Keys: ' + ###ITEM_KEYS###)
			}
		}

		# Configuration for layer record. Values will be override the record values if set. 
		layer {

			shadowAnchorX = 15
			shadowAnchorY = 30

			# To set a user defined function, set a key and the value. The function can be insert 
			# with the key in the template as "item.mapControlFunctions.userFunction".
			# You can also override existing functions like "openInfoWindow", "panTo" or "fitBounds".
			mapControlFunctions {
				userFunction = alert('Layer Item Key: ###ITEM_KEY###')
			}

			# Content rendering for the info window.
			infoWindowRenderConfiguration < tt_content
		}
	}

	persistence {

		storagePid = {$plugin.tx_adgooglemaps.persistence.storagePid}

		classes {
			Tx_AdGoogleMaps_Domain_Model_Layer {
				mapping {
					tableName = tx_adgooglemaps_domain_model_layer
				}
				subclasses {
					Tx_AdGoogleMaps_MapBuilder_Layer_Marker = Tx_AdGoogleMaps_Domain_Model_Layer_Marker
				}
			}

			Tx_AdGoogleMaps_Domain_Model_Layer_Marker {
				mapping {
					recordType = Tx_AdGoogleMaps_MapBuilder_Layer_Marker
					tableName = tx_adgooglemaps_domain_model_layer
				}
			}
		}
	}

	view {
		templateRootPath = {$plugin.tx_adgooglemaps.view.templateRootPath}
		partialRootPath = {$plugin.tx_adgooglemaps.view.partialRootPath}
		layoutRootPath = {$plugin.tx_adgooglemaps.view.layoutRootPath}
	}

	_LOCAL_LANG {
		default {
			searchLegend = Search
			searchLabel = Search for Address
			searchButton = Search
			panTo = pan to
			fitBounds = fit bounds
			userFunction = user function
		}
	}
}

###
# Replace stdheaders insertData with dataWrap. insertData replace Fluid variables of the info windows for tt_address.
##
lib.stdheader.10 {
	1 = TEXT
	1.current = 1
	1.insertData >
	1.fontTag >
	1.dataWrap = <h1{register:headerStyle}{register:headerClass}>|</h1>
	2 < .1
	2.dataWrap = <h2{register:headerStyle}{register:headerClass}>|</h2>
	3 < .1
	3.dataWrap = <h3{register:headerStyle}{register:headerClass}>|</h3>
	4 < .1
	4.dataWrap = <h4{register:headerStyle}{register:headerClass}>|</h4>
	5 < .1
	5.dataWrap = <h5{register:headerStyle}{register:headerClass}>|</h5>
}